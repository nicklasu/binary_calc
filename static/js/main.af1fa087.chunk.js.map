{"version":3,"sources":["Components/Header/Header.js","Components/Input/Input.js","Components/Button/Button.js","Functions/Calculate.js","Components/Result/Result.js","Functions/GetNumber.js","Components/Signed/Signed.js","Components/Unsigned/Functions/addZeros.js","Components/Unsigned/Functions/UnsignedOverflow.js","Functions/Signed/BinaryToArray.js","Functions/carriedNumbers.js","Functions/borrowedNumbers.js","Components/Unsigned/Unsigned.js","Components/UnSignedOr/UnsignedOr.js","Components/UnsignedComponent/UnsignedComponent.js","Functions/Signed/signedFlip.js","Components/SignedComponent/SignedComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Header","sign","Input","setNumber","name","className","inputMode","pattern","placeholder","onChange","e","currentTarget","value","style","textAlign","Button","text","setValue","type","onClick","calculateTotal","first","second","char","Number","Result","num1","num2","calc","total","calculate","getNumber","binary","parseInt","Signed","addZerosUnsigned","bin","bitSize","length","zerosNeeded","i","unsignedOverflow","addZeros","binaryToArray","split","carriedNumbers","bin1","map","bin2","carriedNumbersArray","carry","Math","max","join","toString","carriedNumbersSubtract","Unsigned","setNum1","setNum2","useEffect","resultAsBinary","result","checkOverflow","stars","carried","borrowed","includes","UnsignedOr","UnsignedComponent","useState","setCalc","signedFlip","arr1","SignedComponent","App","setSign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af1fa087.chunk.js","sourcesContent":["function Header({ sign }) {\n  return sign === 'unsigned'\n    ? <h1>Unsigned</h1>\n    : <h1>Signed</h1>;\n}\n\nexport default Header;\n","import './style.css';\n// For user input\n// Take only binary numbers (0 and 1) as valid values\nfunction Input({ setNumber, name }) {\n  return (\n    <input\n      className={name === 'num1'\n        ? 'input-num1'\n        : 'input-num2'}\n      inputMode=\"numeric\"\n      pattern=\"[0-1]*\"\n      placeholder={0}\n      onChange={(e) => setNumber(e.currentTarget.value)}\n      style={{ textAlign: 'center' }}\n    />\n  );\n}\n\nexport default Input;\n","function Button({ text, setValue }) {\n  return (\n    <button\n      type=\"button\"\n      onClick={() => setValue(text)}\n    >\n      {text}\n    </button>\n  );\n}\n\nexport default Button;\n","function calculateTotal(first, second, char) {\n  if (char === '+') return Number(first) + Number(second);\n  if (char === '-') return Number(first) - Number(second);\n  return undefined;\n}\nexport default calculateTotal;\n","import calculate from '../../Functions/Calculate';\nimport './style.css';\n\n// Display the result\nfunction Result({ num1, num2, calc }) {\n  const total = calculate(num1, num2, calc);\n  return (\n    <p className=\"result-calc\">\n      <span className=\"result-num1\">{`${num1} `}</span>\n      <span>{`${calc} `}</span>\n      <span className=\"result-num2\">{`${num2} `}</span>\n      <span>= </span>\n      <span className=\"result-total\">{`${total}`}</span>\n    </p>\n  );\n}\n\nexport default Result;\n","/**\n * Convert binary string to number and return it\n * If string is not valid binary return 0\n * @example 0011 => 3\n * @example 0022 => 0\n * @param {String} binary\n * @returns {Number}\n */\nfunction getNumber(binary) {\n  const number = parseInt(binary, 2);\n  return number || 0;\n}\nexport default getNumber;\n","// Signed\nfunction Signed() {\n  return (\n    <>\n      <p>Feature</p>\n      <p>Under</p>\n      <hr />\n      <p>Development</p>\n    </>\n  );\n}\nexport default Signed;\n","/**\n * Add zeros to beginning of binary according to bit size\n * @example (0100, 5) => 01000\n * @param {String} binary - binary\n * @param {Number} bitSize - bit size\n * @returns {String}\n */\nfunction addZerosUnsigned(bin, bitSize) {\n  let binary = bin;\n  // Check if adding zeros is needed\n  if (binary.length < bitSize) {\n    const zerosNeeded = bitSize - binary.length;\n    for (let i = 0; i < zerosNeeded; i += 1) {\n      binary = `0${binary}`;\n    }\n  }\n  return binary;\n}\n\nexport default addZerosUnsigned;\n","import addZeros from './addZeros';\n// Check if result is bigger than bit size\n// Or smaller than 0\n// Add zeros according to bit size\nfunction unsignedOverflow(binary, bitSize) {\n  const overflow = binary.length > bitSize || parseInt(binary, 2) < 0;\n  return overflow ? 'overflow!' : addZeros(binary, bitSize);\n}\n\nexport default unsignedOverflow;\n","/**\n * Divides string to array\n * @example 'heippa' => ['h','e','i','p','p','a']\n * @example '000111' => ['0','0','0','1','1','1']\n * @param {String} binary\n * @returns {Array}\n */\nfunction binaryToArray(binary) {\n  return binary.split('');\n}\n\nexport default binaryToArray;\n","import binaryToArray from './Signed/BinaryToArray';\n/**\n * @param {String} num1 - binary number as string\n * @param {String} num2 - binary number as string\n * @returns {String} - Displays carried numbers as stars\n * @example ('0101', '0101') => '* * '\n */\n\n// Add star if number was carried\n// Add empty space if not\nfunction carriedNumbers(num1, num2) {\n  const bin1 = binaryToArray(num1).map(Number);\n  const bin2 = binaryToArray(num2).map(Number);\n  const carriedNumbersArray = [];\n  const bitSize = Math.max(num1.length, num2.length) - 1;\n  let carry = false;\n\n  for (let i = bitSize; i >= 0; i -= 1) {\n    carriedNumbersArray[i] = carry\n      ? '*'\n      : '\\u00A0';\n    carry = bin1[i] + bin2[i] + carry > 1;\n  }\n  return carriedNumbersArray.join('').toString();\n}\n\nexport default carriedNumbers;\n","import binaryToArray from './Signed/BinaryToArray';\n/**\n * @param {String} num1 - binary number as string\n * @param {String} num2 - binary number as string\n * @returns {String} - Displays borrowed numbers as stars\n * @example ('1000', '0001') => '*** '\n */\n\n// Add star if number was borrowed\n// Add empty space if not\nfunction carriedNumbersSubtract(num1, num2) {\n  const bin1 = binaryToArray(num1).map(Number);\n  const bin2 = binaryToArray(num2).map(Number);\n  const carriedNumbersArray = [];\n  const bitSize = Math.max(num1.length, num2.length) - 1;\n  let carry = false;\n\n  for (let i = bitSize; i >= 0; i -= 1) {\n    carriedNumbersArray[i] = carry\n      ? '*'\n      : '\\u00A0';\n    carry = bin1[i] - bin2[i] - carry < 0;\n  }\n  return carriedNumbersArray.join('').toString();\n}\n\nexport default carriedNumbersSubtract;\n","import './style.css';\nimport { useEffect } from 'react';\nimport getNumber from '../../Functions/GetNumber';\nimport calculate from '../../Functions/Calculate';\nimport addZeros from './Functions/addZeros';\nimport checkOverflow from './Functions/UnsignedOverflow';\nimport carried from '../../Functions/carriedNumbers';\nimport borrowed from '../../Functions/borrowedNumbers';\n\n// Display unsigned char calculation\nfunction Unsigned({\n  num1, num2, setNum1, setNum2, calc,\n}) {\n  // Set max bit size from user input\n  const bitSize = Math.max(num1.length, num2.length);\n\n  // When component updates, adds needed zeros according to bitSize\n  useEffect(() => {\n    setNum1(addZeros(num1, bitSize));\n    setNum2(addZeros(num2, bitSize));\n  });\n\n  // Display result as binary\n  const resultAsBinary = calculate(\n    getNumber(num1),\n    getNumber(num2),\n    calc,\n  ).toString(2);\n\n  // Display the result\n  const result = checkOverflow(resultAsBinary, bitSize);\n\n  // Display carried/borrowed as stars\n  const stars = calc === '+'\n    ? carried(num1, num2)\n    : borrowed(num1, num2);\n\n  // Show helper text if numbers are borrowed or carried\n  // If numbers arent borrowed or carried, show nothing\n  const showCarried = () => (stars.includes('*') ? '*carried' : null);\n  const showBorrowed = () => (stars.includes('*') ? '*borrowed' : null);\n\n  return (\n    <>\n      <section className=\"section-calc\">\n        <p className=\"unsigned-carried-numbers\">{stars}</p>\n        <p className=\"unsigned-num1\">{num1}</p>\n        <p className=\"unsigned-num2\">\n          <span className=\"unsigned-calc\">{calc}</span>\n          {num2}\n        </p>\n        <hr />\n        <p className=\"unsigned-result\">{result}</p>\n      </section>\n      <p className=\"unsigned-stars\">\n        {calc === '+'\n          ? showCarried()\n          : showBorrowed()}\n      </p>\n    </>\n  );\n}\nexport default Unsigned;\n","import Signed from '../Signed/Signed';\nimport Unsigned from '../Unsigned/Unsigned';\n\n// Calculate Unsigned or Signed value based on user choice\nfunction UnsignedOr({\n  num1, num2, setNum1, setNum2, calc, sign,\n}) {\n  return (\n    <>\n      {sign === 'unsigned'\n        ? (\n          <Unsigned\n            setNum1={setNum1}\n            setNum2={setNum2}\n            num1={num1}\n            num2={num2}\n            calc={calc}\n            sign={sign}\n          />\n        )\n        : (\n          <Signed\n            setNum1={setNum1}\n            setNum2={setNum2}\n            num1={num1}\n            num2={num2}\n            calc={calc}\n            sign={sign}\n          />\n        )}\n    </>\n  );\n}\n\nexport default UnsignedOr;\n","import { useState } from 'react';\n\nimport Input from '../Input/Input';\nimport Button from '../Button/Button';\nimport Result from '../Result/Result';\nimport getNumber from '../../Functions/GetNumber';\n\nimport UnsignedOr from '../UnSignedOr/UnsignedOr';\n\nfunction UnsignedComponent() {\n  const [num1, setNum1] = useState('0');\n  const [num2, setNum2] = useState('0');\n  const [calc, setCalc] = useState('+');\n  return (\n    <section>\n      <Input setNumber={setNum1} name=\"num1\" />\n      <Input setNumber={setNum2} name=\"num2\" />\n      <br />\n      <Button text=\"+\" setValue={setCalc} />\n      <Button text=\"-\" setValue={setCalc} />\n      <br />\n\n      <Result\n        num1={getNumber(num1)}\n        num2={getNumber(num2)}\n        calc={calc}\n      />\n      {\n        // Show Unsigned or signed after user has submitted in both fields\n        num1 && num2\n          ? (\n            <UnsignedOr\n              setNum1={setNum1}\n              setNum2={setNum2}\n              num1={num1}\n              num2={num2}\n              calc={calc}\n              sign=\"unsigned\"\n            />\n          )\n          : null\n      }\n    </section>\n  );\n}\n\nexport default UnsignedComponent;\n","function signedFlip(num1) {\n  const arr1 = num1.split('');\n  if (arr1[0] === '1') {\n    for (let i = 0; i < arr1.length; i += 1) {\n      arr1[i] = arr1[i] === '1'\n        ? '0'\n        : '1';\n    }\n  } else {\n    return parseInt(arr1.join('').toString(), 2);\n  }\n  const flipped = parseInt(arr1.join('').toString(), 2);\n  return flipped * -1 - 1;\n}\nexport default signedFlip;\n","import { useState } from 'react';\n\nimport Input from '../Input/Input';\nimport Button from '../Button/Button';\nimport Result from '../Result/Result';\n\nimport UnsignedOr from '../UnSignedOr/UnsignedOr';\nimport signedFlip from '../../Functions/Signed/signedFlip';\n\nfunction SignedComponent() {\n  const [num1, setNum1] = useState('0');\n  const [num2, setNum2] = useState('0');\n  const [calc, setCalc] = useState('+');\n  return (\n    <section>\n\n      <Input setNumber={setNum1} name=\"num1\" />\n      <Input setNumber={setNum2} name=\"num2\" />\n      <br />\n      <Button text=\"+\" setValue={setCalc} />\n      <Button text=\"-\" setValue={setCalc} />\n      <br />\n\n      <Result\n        num1={\n          signedFlip(num1)\n          }\n        num2={\n        signedFlip(num2)\n          }\n        calc={calc}\n      />\n      {\n        // Show Unsigned or signed after user has submitted in both fields\n        num1 && num2\n          ? (\n            <UnsignedOr\n              setNum1={setNum1}\n              setNum2={setNum2}\n              num1={num1}\n              num2={num2}\n              calc={calc}\n              sign=\"signed\"\n            />\n          )\n          : null\n      }\n    </section>\n  );\n}\n\nexport default SignedComponent;\n","import { useState } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport UnsignedComponent from './Components/UnsignedComponent/UnsignedComponent';\nimport SignedComponent from './Components/SignedComponent/SignedComponent';\nimport Button from './Components/Button/Button';\n\nfunction App() {\n  const [sign, setSign] = useState('unsigned');\n\n  return (\n    <main className=\"main-content\">\n      <Header sign={sign} />\n      <Button text=\"unsgnd\" setValue={setSign} />\n      <Button text=\"signed\" setValue={setSign} />\n\n      {\n      // Signed pressed, show signed component. Otherwise show unsigned component\n      sign === 'signed'\n        ? (\n          <SignedComponent />\n        )\n        : (\n          <UnsignedComponent />\n        )\n}\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}