{"version":3,"sources":["Components/Input/Input.js","Components/Button/Button.js","Functions/Calculate.js","Components/Result/Result.js","Functions/GetNumber.js","Components/Header/Header.js","Components/Signed/Signed.js","Components/Unsigned/Functions/addZeros.js","Components/Unsigned/Functions/UnsignedOverflow.js","Functions/Signed/BinaryToArray.js","Functions/addStar.js","Components/Unsigned/Unsigned.js","Components/UnSignedOr/UnsignedOr.js","App.js","reportWebVitals.js","index.js"],"names":["Input","setNumber","inputMode","pattern","placeholder","onChange","e","currentTarget","value","style","textAlign","Button","text","setValue","type","onClick","calculateTotal","first","second","char","Number","Result","num1","num2","calc","total","calculate","getNumber","binary","parseInt","Header","sign","Signed","className","addZerosUnsigned","bin","bitSize","length","zerosNeeded","i","unsignedOverflow","addZeros","binaryToArray","split","addStar","numb1","numb2","numb3","starArr","Array","reverse","bin1","bin2","carry","join","Unsigned","setNum1","setNum2","Math","max","useEffect","resultAsBinary","toString","result","checkOverflow","UnsignedOr","App","useState","setCalc","setSign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.440a5dd3.chunk.js","sourcesContent":["// For user input\n// Take only binary numbers (0 and 1) as valid values\nfunction Input({ setNumber }) {\n  return (\n    <input\n      inputMode=\"numeric\"\n      pattern=\"[0-1]*\"\n      placeholder={0}\n      onChange={(e) => setNumber(e.currentTarget.value)}\n      style={{ textAlign: 'center' }}\n    />\n  );\n}\n\nexport default Input;\n","function Button({ text, setValue }) {\n  return (\n    <button\n      type=\"button\"\n      onClick={() => setValue(text)}\n    >\n      {text}\n    </button>\n  );\n}\n\nexport default Button;\n","function calculateTotal(first, second, char) {\n  if (char === '+') return Number(first) + Number(second);\n  if (char === '-') return Number(first) - Number(second);\n  return undefined;\n}\nexport default calculateTotal;\n","import calculate from '../../Functions/Calculate';\n\n// Display the result\nfunction Result({ num1, num2, calc }) {\n  const total = calculate(num1, num2, calc);\n  return <p style={{ textAlign: 'center' }}>{total}</p>;\n}\n\nexport default Result;\n","/**\n * Convert binary string to number and return it\n * If string is not valid binary return 0\n * @example 0011 => 3\n * @example 0022 => 0\n * @param {String} binary\n * @returns {Number}\n */\nfunction getNumber(binary) {\n  const number = parseInt(binary, 2);\n  return number || 0;\n}\nexport default getNumber;\n","function Header({ sign }) {\n  return sign === 'unsigned'\n    ? <h1>HeaderUnsigned</h1>\n    : <h1>HeaderSigned</h1>;\n}\n\nexport default Header;\n","// Signed\nfunction Signed() {\n  return (\n    <section className=\"section-calc\">\n      <p>Feature</p>\n      <p>Under</p>\n      <hr />\n      <p>Development</p>\n    </section>\n  );\n}\nexport default Signed;\n","/**\n * Add zeros to beginning of binary according to bit size\n * @example (0100, 5) => 01000\n * @param {String} binary - binary\n * @param {Number} bitSize - bit size\n * @returns {String}\n */\nfunction addZerosUnsigned(bin, bitSize) {\n  let binary = bin;\n  // Check if adding zeros is needed\n  if (binary.length < bitSize) {\n    const zerosNeeded = bitSize - binary.length;\n    for (let i = 0; i < zerosNeeded; i += 1) {\n      binary = `0${binary}`;\n    }\n  }\n  return binary;\n}\n\nexport default addZerosUnsigned;\n","import addZeros from './addZeros';\n// Check if result is bigger than bit size\n// Or smaller than 0\n// Add zeros according to bit size\nfunction unsignedOverflow(binary, bitSize) {\n  const overflow = binary.length > bitSize || parseInt(binary, 2) < 0;\n  return overflow ? 'overflow!' : addZeros(binary, bitSize);\n}\n\nexport default unsignedOverflow;\n","/**\n * Divides string to array\n * @example 'heippa' => ['h','e','i','p','p','a']\n * @example '000111' => ['0','0','0','1','1','1']\n * @param {String} binary\n * @returns {Array}\n */\nfunction binaryToArray(binary) {\n  return binary.split('');\n}\n\nexport default binaryToArray;\n","import binaryToArray from './Signed/BinaryToArray';\n\nfunction addStar(num1, num2, bitSize) {\n  const starArr = new Array(bitSize).reverse();\n  const bin1 = binaryToArray(num1).reverse();\n  const bin2 = binaryToArray(num2).reverse();\n\n  function carryToNext(numb1, numb2, numb3) {\n    return (Number(numb1) + Number(numb2) + numb3) > 1;\n  }\n  let carry = 0;\n  for (let i = 0; (bitSize - 1) > i; i += 1) {\n    if (carryToNext(bin1[i], bin2[i], carry)) {\n      starArr[i] = '*';\n      carry += 1;\n    } else {\n      starArr[i] = ' ';\n      carry += 0;\n    }\n  }\n\n  return starArr.join('');\n}\n\nexport default addStar;\n","import './style.css';\nimport { useEffect } from 'react';\nimport getNumber from '../../Functions/GetNumber';\nimport calculate from '../../Functions/Calculate';\nimport addZeros from './Functions/addZeros';\nimport checkOverflow from './Functions/UnsignedOverflow';\nimport addStar from '../../Functions/addStar';\n// TODO:\n// Niin ku tän komponentin nimi kertoo, se näyttää vaan Unsigned version\n// Tän komponentin sisälle ei muuta kamaa, eli tän komponentin\n// Tehtävä on tietää vaan niistä asioista mitä sen nimi kertoo\n\n// Jos tämän ja Signed komponentin välillä vaihdellaan näkymää\n// Niin tehdään se tuolla UnSignedOr komponentissa\n// Eli UnSignedOr pitäisi sisällään 2 komponenttia (Signed, UnSigned)\n// UnSignedOrn sisälle se logiikka mikä vaihtaa näkymää niiden kahden komponentin välillä\n// if (sign === \"unsigned\") niin näytä Unsigned komponentti\n// Vähän samalla idealla kuin mitä oot tehnyt tonne Header komponenttiin\n\n// Reactissa on hyvä pitää komponentit mahdollisimman pieninä, ainakin tän tason ohjelmassa\n// Helpompi testata niitä ja tehdä muutoksia, kun komponentissa on mahdollisimman vähän koodia tai\n// Siihen kohdistuu mahdollisimman vähän sivuvaikutuksia\n\n// Display unsigned char calculation\nfunction Unsigned({\n  num1, num2, setNum1, setNum2, calc,\n}) {\n  // Set max bit size from user input\n  const bitSize = Math.max(num1.length, num2.length);\n\n  // When component updates, adds needed zeros according to bitSize\n  useEffect(() => {\n    setNum1(addZeros(num1, bitSize));\n    setNum2(addZeros(num2, bitSize));\n  });\n\n  // Display result as binary\n  const resultAsBinary = calculate(\n    getNumber(num1),\n    getNumber(num2),\n    calc,\n  ).toString(2);\n\n  // Display the result\n  const result = checkOverflow(resultAsBinary, bitSize);\n\n  return (\n    <section className=\"section-calc\">\n      <p className=\"stars\">{addStar(num1, num2, bitSize).toString()}</p>\n      <p>{num1}</p>\n      <p>{num2}</p>\n      <hr />\n      <p>{result}</p>\n    </section>\n  );\n}\nexport default Unsigned;\n","import Signed from '../Signed/Signed';\nimport Unsigned from '../Unsigned/Unsigned';\n\n// Calculate Unsigned or Signed value based on user choice\nfunction UnsignedOr({\n  num1, num2, setNum1, setNum2, calc, sign,\n}) {\n  return sign === 'unsigned' ? (\n    <Unsigned\n      setNum1={setNum1}\n      setNum2={setNum2}\n      num1={num1}\n      num2={num2}\n      calc={calc}\n      sign={sign}\n    />\n  ) : (\n    <Signed\n      setNum1={setNum1}\n      setNum2={setNum2}\n      num1={num1}\n      num2={num2}\n      calc={calc}\n      sign={sign}\n    />\n  );\n}\n\nexport default UnsignedOr;\n","import { useState } from 'react';\nimport './App.css';\nimport Input from './Components/Input/Input';\nimport Button from './Components/Button/Button';\nimport Result from './Components/Result/Result';\nimport getNumber from './Functions/GetNumber';\nimport Header from './Components/Header/Header';\nimport UnsignedOr from './Components/UnSignedOr/UnsignedOr';\n\nfunction App() {\n  const [num1, setNum1] = useState(0);\n  const [num2, setNum2] = useState(0);\n  const [calc, setCalc] = useState('+');\n  const [sign, setSign] = useState('unsigned');\n\n  return (\n    <main className=\"main-content\">\n      <Header sign={sign} />\n      <Input setNumber={setNum1} />\n      <Input setNumber={setNum2} />\n      <br />\n      <Button text=\"-\" setValue={setCalc} />\n      <Button text=\"+\" setValue={setCalc} />\n      <br />\n      <Button text=\"signed\" setValue={setSign} />\n      <Button text=\"unsigned\" setValue={setSign} />\n      <Result\n        num1={getNumber(num1)}\n        num2={getNumber(num2)}\n        calc={calc}\n      />\n      {\n        // Show Unsigned or signed after user has submitted in both fields\n        num1 && num2\n          ? (\n            <UnsignedOr\n              setNum1={setNum1}\n              setNum2={setNum2}\n              num1={num1}\n              num2={num2}\n              calc={calc}\n              sign={sign}\n            />\n          ) : null\n      }\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}