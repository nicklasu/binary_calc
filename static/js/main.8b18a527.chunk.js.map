{"version":3,"sources":["Components/Input/Input.js","Functions/Calculate.js","Components/Result/Result.js","Functions/addMissingZeros.js","Functions/BinaryToArray.js","Functions/GetNumber.js","Components/CalcSteps/CalcSteps.js","App.js","reportWebVitals.js","index.js"],"names":["Input","setNumber","inputMode","pattern","placeholder","onChange","e","currentTarget","value","style","textAlign","calculateTotal","first","second","char","Result","num1","num2","calc","total","calculate","addMissingZeros","array","neededLength","length","zerosNeeded","i","unshift","binaryToArray","binary","split","getNumber","number","parseInt","CalcSteps","binary1","binary2","overflow","toString","className","App","useState","setNum1","setNum2","setCalc","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAceA,MAZf,YAA+B,IAAdC,EAAa,EAAbA,UACf,OACE,uBACEC,UAAU,UACVC,QAAQ,SACRC,YAAa,EACbC,SAAU,SAACC,GAAD,OAAOL,EAAUK,EAAEC,cAAcC,QAC3CC,MAAO,CAAEC,UAAW,aCLXC,MAJf,SAAwBC,EAAOC,EAAQC,GACrC,MAAa,MAATA,EAAqBF,EAAQC,EACpB,MAATC,EAAqBF,EAAQC,OAAjC,GCMaE,MALf,YAAuC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtBC,EAAQC,EAAUJ,EAAMC,EAAMC,GACpC,OAAO,mBAAGT,MAAO,CAAEC,UAAW,UAAvB,SAAoCS,K,MCc9BE,MAXf,SAAyBC,EAAOC,GAE9B,GAAID,EAAME,OAASD,EAEjB,IADA,IAAIE,EAAcF,EAAeD,EAAME,OAC9BE,EAAI,EAAGA,EAAID,EAAaC,IAC/BJ,EAAMK,QAAQ,KAGlB,OAAOL,GCLMM,MAJf,SAAuBC,GACrB,OAAOA,EAAOC,MAAM,KCIPC,MAJf,SAAmBF,GACjB,IAAMG,EAASC,SAASJ,EAAQ,GAChC,OAAOG,GAAkB,GC6BZE,MAhCf,YAA0C,IAArBlB,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAC3BiB,EAAUd,EACZO,EAAcZ,GACdY,EAAcX,GAAMO,QAElBY,EAAUf,EACZO,EAAcX,GACdW,EAAcZ,GAAMQ,QAGlBL,EAAQC,EAAUW,EAAUf,GAAOe,EAAUd,GAAOC,GAClDmB,EACJlB,EAAMmB,SAAS,GAAGd,OAASW,EAAQX,QACnCL,EAAMmB,SAAS,GAAGd,OAASY,EAAQZ,OAErC,OACE,0BAASe,UAAU,eAAnB,UACE,4BAAIJ,IACJ,4BAAIC,IACJ,uBAGEC,EACE,0CAEA,mBAAG5B,MAAO,CAAEC,UAAW,SAAvB,SAAmCS,EAAMmB,SAAS,SCD7CE,MAzBf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNzB,EADM,KACA0B,EADA,OAEWD,mBAAS,GAFpB,mBAENxB,EAFM,KAEA0B,EAFA,OAGWF,mBAAS,KAHpB,mBAGNvB,EAHM,KAGA0B,EAHA,KAUb,OACE,uBAAML,UAAU,eAAhB,UACE,cAAC,EAAD,CAAOtC,UAAWyC,IAClB,cAAC,EAAD,CAAOzC,UAAW0C,IAFpB,IAEgC,uBAC9B,wBAAQE,QAAS,kBAAMD,EAAQ,MAA/B,eACA,wBAAQC,QAAS,kBAAMD,EAAQ,MAA/B,eACA,cAAC,EAAD,CAAQ5B,KAAMe,EAAUf,GAAOC,KAAMc,EAAUd,GAAOC,KAAMA,IAG1DF,GAAQC,EAAO,cAAC,EAAD,CAAWD,KAAMA,EAAMC,KAAMA,EAAMC,KAAMA,IAAW,SCb5D4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8b18a527.chunk.js","sourcesContent":["// For user input\r\n// Take only binary numbers (0 and 1) as valid values\r\nfunction Input({ setNumber }) {\r\n  return (\r\n    <input\r\n      inputMode=\"numeric\"\r\n      pattern=\"[0-1]*\"\r\n      placeholder={0}\r\n      onChange={(e) => setNumber(e.currentTarget.value)}\r\n      style={{ textAlign: \"center\" }}\r\n    ></input>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","function calculateTotal(first, second, char) {\r\n  if (char === \"+\") return first + second;\r\n  if (char === \"-\") return first - second;\r\n}\r\nexport default calculateTotal;\r\n","import calculate from \"../../Functions/Calculate\";\r\n\r\n// Display the result\r\nfunction Result({ num1, num2, calc }) {\r\n  const total = calculate(num1, num2, calc);\r\n  return <p style={{ textAlign: \"center\" }}>{total}</p>;\r\n}\r\n\r\nexport default Result;\r\n","/**\n * Add zeros to beginning of binary array to make them match\n * @example (0100, 5) => ['0','0','1','0','0']\n * @example (0100, 4) => ['0','1','0','0']\n * @param {Array} array - binary as array\n * @param {Number} neededLength - length of other input field\n * @returns {Array}\n */\nfunction addMissingZeros(array, neededLength) {\n  // Check if adding zeros is needed\n  if (array.length < neededLength) {\n    let zerosNeeded = neededLength - array.length;\n    for (let i = 0; i < zerosNeeded; i++) {\n      array.unshift(\"0\");\n    }\n  }\n  return array;\n}\n\nexport default addMissingZeros;\n","/**\r\n * Divides string to array\r\n * @example 'heippa' => ['h','e','i','p','p','a']\r\n * @example '000111' => ['0','0','0','1','1','1']\r\n * @param {String} binary\r\n * @returns {Array}\r\n */\r\nfunction binaryToArray(binary) {\r\n  return binary.split(\"\");\r\n}\r\n\r\nexport default binaryToArray;\r\n","/**\r\n * Convert binary string to number and return it\r\n * If string is not valid binary return 0\r\n * @example 0011 => 3\r\n * @example 0022 => 0\r\n * @param {String} binary\r\n * @returns {Number}\r\n */\r\nfunction getNumber(binary) {\r\n  const number = parseInt(binary, 2);\r\n  return number ? number : 0;\r\n}\r\nexport default getNumber;\r\n","import \"./style.css\";\nimport addMissingZeros from \"../../Functions/addMissingZeros\";\nimport binaryToArray from \"../../Functions/BinaryToArray\";\nimport getNumber from \"../../Functions/GetNumber\";\nimport calculate from \"../../Functions/Calculate\";\n\n// Tätä pitää muuttaa vielä jotenkin selvemmäksi\nfunction CalcSteps({ num1, num2, calc }) {\n  let binary1 = addMissingZeros(\n    binaryToArray(num1),\n    binaryToArray(num2).length\n  );\n  let binary2 = addMissingZeros(\n    binaryToArray(num2),\n    binaryToArray(num1).length\n  );\n  // Total +/- in binary\n  let total = calculate(getNumber(num1), getNumber(num2), calc);\n  const overflow =\n    total.toString(2).length > binary1.length ||\n    total.toString(2).length > binary2.length;\n\n  return (\n    <section className=\"section-calc\">\n      <p>{binary1}</p>\n      <p>{binary2}</p>\n      <hr />\n      {\n        // Display overflow message if it overflows(!?)\n        overflow ? (\n          <p>overflow!</p>\n        ) : (\n          <p style={{ textAlign: \"right\" }}>{total.toString(2)}</p>\n        )\n      }\n    </section>\n  );\n}\n\nexport default CalcSteps;\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Input from \"./Components/Input/Input\";\r\nimport Result from \"./Components/Result/Result\";\r\nimport CalcSteps from \"./Components/CalcSteps/CalcSteps\";\r\nimport getNumber from \"./Functions/GetNumber\";\r\nfunction App() {\r\n  const [num1, setNum1] = useState(0);\r\n  const [num2, setNum2] = useState(0);\r\n  const [calc, setCalc] = useState(\"+\");\r\n\r\n  // TODO:\r\n  // Vois jotenkin tyylitellä kevyesti tätä sivustoa\r\n  // Kissakuvia ja mageita videoita\r\n  // Muista golden ratio\r\n\r\n  return (\r\n    <main className=\"main-content\">\r\n      <Input setNumber={setNum1} />\r\n      <Input setNumber={setNum2} /> <br />\r\n      <button onClick={() => setCalc(\"-\")}>-</button>\r\n      <button onClick={() => setCalc(\"+\")}>+</button>\r\n      <Result num1={getNumber(num1)} num2={getNumber(num2)} calc={calc} />\r\n      {\r\n        // Show CalcSteps after user has submitted in both fields\r\n        num1 && num2 ? <CalcSteps num1={num1} num2={num2} calc={calc} /> : null\r\n      }\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}