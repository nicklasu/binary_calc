{"version":3,"sources":["Components/Input/Input.js","Components/Button/Button.js","Functions/Calculate.js","Components/Result/Result.js","Functions/GetNumber.js","Components/Header/Header.js","Components/Signed/Signed.js","Components/Unsigned/Functions/addZeros.js","Components/Unsigned/Functions/UnsignedOverflow.js","Functions/Signed/BinaryToArray.js","Functions/carriedNumbersAdd.js","Functions/carriedNumbersSubtract.js","Components/Unsigned/Unsigned.js","Components/UnSignedOr/UnsignedOr.js","App.js","reportWebVitals.js","index.js"],"names":["Input","setNumber","inputMode","pattern","placeholder","onChange","e","currentTarget","value","style","textAlign","Button","text","setValue","type","onClick","calculateTotal","first","second","char","Number","Result","num1","num2","calc","total","calculate","getNumber","binary","parseInt","Header","sign","Signed","addZerosUnsigned","bin","bitSize","length","zerosNeeded","i","unsignedOverflow","addZeros","binaryToArray","split","carriedNumbers","bin1","map","bin2","carriedNumbersArray","carry","Math","max","join","toString","carriedNumbersSubtract","Unsigned","setNum1","setNum2","useEffect","resultAsBinary","result","checkOverflow","carried","carriedNumbersAdd","className","UnsignedOr","App","useState","setCalc","setSign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAceA,MAZf,YAA+B,IAAdC,EAAa,EAAbA,UACf,OACE,uBACEC,UAAU,UACVC,QAAQ,SACRC,YAAa,EACbC,SAAU,SAACC,GAAD,OAAOL,EAAUK,EAAEC,cAAcC,QAC3CC,MAAO,CAAEC,UAAW,aCEXC,MAXf,YAAqC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACtB,OACE,wBACEC,KAAK,SACLC,QAAS,kBAAMF,EAASD,IAF1B,SAIGA,KCDQI,MALf,SAAwBC,EAAOC,EAAQC,GACrC,MAAa,MAATA,EAAqBC,OAAOH,GAASG,OAAOF,GACnC,MAATC,EAAqBC,OAAOH,GAASG,OAAOF,QAAhD,GCMaG,MALf,YAAuC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtBC,EAAQC,EAAUJ,EAAMC,EAAMC,GACpC,OAAO,mBAAGf,MAAO,CAAEC,UAAW,UAAvB,SAAoCe,KCO9BE,MAJf,SAAmBC,GAEjB,OADeC,SAASD,EAAQ,IACf,GCJJE,MANf,YACE,MAAgB,aADQ,EAARC,KAEZ,gDACA,+CCQSC,MAVf,WACE,OACE,qCACE,wCACA,sCACA,uBACA,gD,MCYSC,MAZf,SAA0BC,EAAKC,GAC7B,IAAIP,EAASM,EAEb,GAAIN,EAAOQ,OAASD,EAElB,IADA,IAAME,EAAcF,EAAUP,EAAOQ,OAC5BE,EAAI,EAAGA,EAAID,EAAaC,GAAK,EACpCV,EAAM,WAAOA,GAGjB,OAAOA,GCPMW,MALf,SAA0BX,EAAQO,GAEhC,OADiBP,EAAOQ,OAASD,GAAWN,SAASD,EAAQ,GAAK,EAChD,YAAcY,EAASZ,EAAQO,ICKpCM,MAJf,SAAuBb,GACrB,OAAOA,EAAOc,MAAM,KCsBPC,MAvBf,SAAwBrB,EAAMC,GAc5B,IAZA,IAAMqB,EAAOH,EAAcnB,GAAMuB,IAAIzB,QAC/B0B,EAAOL,EAAclB,GAAMsB,IAAIzB,QAC/B2B,EAAsB,GAMxBC,GAAQ,EAIHV,EATOW,KAAKC,IAAI5B,EAAKc,OAAQb,EAAKa,QAAU,EAS/BE,GAAK,EAAGA,GAAK,EACjCS,EAAoBT,GAAKU,EACrB,IACA,OACJA,EAAQJ,EAAKN,GAAKQ,EAAKR,GAAKU,EAAQ,EAEtC,OAAOD,EAAoBI,KAAK,IAAIC,YCGvBC,MAvBf,SAAgC/B,EAAMC,GAcpC,IAZA,IAAMqB,EAAOH,EAAcnB,GAAMuB,IAAIzB,QAC/B0B,EAAOL,EAAclB,GAAMsB,IAAIzB,QAC/B2B,EAAsB,GAMxBC,GAAQ,EAIHV,EATOW,KAAKC,IAAI5B,EAAKc,OAAQb,EAAKa,QAAU,EAS/BE,GAAK,EAAGA,GAAK,EACjCS,EAAoBT,GAAKU,EACrB,IACA,OACJA,EAAQJ,EAAKN,GAAKQ,EAAKR,GAAKU,EAAQ,EAEtC,OAAOD,EAAoBI,KAAK,IAAIC,YCuBvBE,MAxCf,YAEI,IADFhC,EACC,EADDA,KAAMC,EACL,EADKA,KAAMgC,EACX,EADWA,QAASC,EACpB,EADoBA,QAAShC,EAC7B,EAD6BA,KAGxBW,EAAUc,KAAKC,IAAI5B,EAAKc,OAAQb,EAAKa,QAG3CqB,qBAAU,WACRF,EAAQf,EAASlB,EAAMa,IACvBqB,EAAQhB,EAASjB,EAAMY,OAIzB,IAAMuB,EAAiBhC,EACrBC,EAAUL,GACVK,EAAUJ,GACVC,GACA4B,SAAS,GAGLO,EAASC,EAAcF,EAAgBvB,GAGvC0B,EAAmB,MAATrC,EACZsC,EAAkBxC,EAAMC,GACxB8B,EAAuB/B,EAAMC,GAEjC,OACE,0BAASwC,UAAU,eAAnB,UACE,mBAAGA,UAAU,2BAAb,SAAyCF,IACzC,4BAAIvC,IACJ,8BACE,sBAAMyC,UAAU,gBAAhB,SAAiCvC,IAChCD,KAEH,uBACA,4BAAIoC,QCZKK,MA9Bf,YAEI,IADF1C,EACC,EADDA,KAAMC,EACL,EADKA,KAAMgC,EACX,EADWA,QAASC,EACpB,EADoBA,QAAShC,EAC7B,EAD6BA,KAAMO,EACnC,EADmCA,KAEpC,OACE,mCACY,aAATA,EAEG,cAAC,EAAD,CACEwB,QAASA,EACTC,QAASA,EACTlC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNO,KAAMA,IAIR,cAAC,EAAD,CACEwB,QAASA,EACTC,QAASA,EACTlC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNO,KAAMA,OCsBHkC,MAxCf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACN5C,EADM,KACAiC,EADA,OAEWW,mBAAS,GAFpB,mBAEN3C,EAFM,KAEAiC,EAFA,OAGWU,mBAAS,KAHpB,mBAGN1C,EAHM,KAGA2C,EAHA,OAIWD,mBAAS,YAJpB,mBAINnC,EAJM,KAIAqC,EAJA,KAMb,OACE,uBAAML,UAAU,eAAhB,UACE,cAAC,EAAD,CAAQhC,KAAMA,IACd,cAAC,EAAD,CAAO9B,UAAWsD,IAClB,cAAC,EAAD,CAAOtD,UAAWuD,IAClB,uBACA,cAAC,EAAD,CAAQ5C,KAAK,IAAIC,SAAUsD,IAC3B,cAAC,EAAD,CAAQvD,KAAK,IAAIC,SAAUsD,IAC3B,uBACA,cAAC,EAAD,CAAQvD,KAAK,SAASC,SAAUuD,IAChC,cAAC,EAAD,CAAQxD,KAAK,WAAWC,SAAUuD,IAClC,cAAC,EAAD,CACE9C,KAAMK,EAAUL,GAChBC,KAAMI,EAAUJ,GAChBC,KAAMA,IAINF,GAAQC,EAEJ,cAAC,EAAD,CACEgC,QAASA,EACTC,QAASA,EACTlC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNO,KAAMA,IAEN,SC7BCsC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63db3a98.chunk.js","sourcesContent":["// For user input\r\n// Take only binary numbers (0 and 1) as valid values\r\nfunction Input({ setNumber }) {\r\n  return (\r\n    <input\r\n      inputMode=\"numeric\"\r\n      pattern=\"[0-1]*\"\r\n      placeholder={0}\r\n      onChange={(e) => setNumber(e.currentTarget.value)}\r\n      style={{ textAlign: 'center' }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","function Button({ text, setValue }) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={() => setValue(text)}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","function calculateTotal(first, second, char) {\r\n  if (char === '+') return Number(first) + Number(second);\r\n  if (char === '-') return Number(first) - Number(second);\r\n  return undefined;\r\n}\r\nexport default calculateTotal;\r\n","import calculate from '../../Functions/Calculate';\r\n\r\n// Display the result\r\nfunction Result({ num1, num2, calc }) {\r\n  const total = calculate(num1, num2, calc);\r\n  return <p style={{ textAlign: 'center' }}>{total}</p>;\r\n}\r\n\r\nexport default Result;\r\n","/**\r\n * Convert binary string to number and return it\r\n * If string is not valid binary return 0\r\n * @example 0011 => 3\r\n * @example 0022 => 0\r\n * @param {String} binary\r\n * @returns {Number}\r\n */\r\nfunction getNumber(binary) {\r\n  const number = parseInt(binary, 2);\r\n  return number || 0;\r\n}\r\nexport default getNumber;\r\n","function Header({ sign }) {\r\n  return sign === 'unsigned'\r\n    ? <h1>HeaderUnsigned</h1>\r\n    : <h1>HeaderSigned</h1>;\r\n}\r\n\r\nexport default Header;\r\n","// Signed\r\nfunction Signed() {\r\n  return (\r\n    <>\r\n      <p>Feature</p>\r\n      <p>Under</p>\r\n      <hr />\r\n      <p>Development</p>\r\n    </>\r\n  );\r\n}\r\nexport default Signed;\r\n","/**\r\n * Add zeros to beginning of binary according to bit size\r\n * @example (0100, 5) => 01000\r\n * @param {String} binary - binary\r\n * @param {Number} bitSize - bit size\r\n * @returns {String}\r\n */\r\nfunction addZerosUnsigned(bin, bitSize) {\r\n  let binary = bin;\r\n  // Check if adding zeros is needed\r\n  if (binary.length < bitSize) {\r\n    const zerosNeeded = bitSize - binary.length;\r\n    for (let i = 0; i < zerosNeeded; i += 1) {\r\n      binary = `0${binary}`;\r\n    }\r\n  }\r\n  return binary;\r\n}\r\n\r\nexport default addZerosUnsigned;\r\n","import addZeros from './addZeros';\r\n// Check if result is bigger than bit size\r\n// Or smaller than 0\r\n// Add zeros according to bit size\r\nfunction unsignedOverflow(binary, bitSize) {\r\n  const overflow = binary.length > bitSize || parseInt(binary, 2) < 0;\r\n  return overflow ? 'overflow!' : addZeros(binary, bitSize);\r\n}\r\n\r\nexport default unsignedOverflow;\r\n","/**\r\n * Divides string to array\r\n * @example 'heippa' => ['h','e','i','p','p','a']\r\n * @example '000111' => ['0','0','0','1','1','1']\r\n * @param {String} binary\r\n * @returns {Array}\r\n */\r\nfunction binaryToArray(binary) {\r\n  return binary.split('');\r\n}\r\n\r\nexport default binaryToArray;\r\n","import binaryToArray from './Signed/BinaryToArray';\r\n/**\r\n * @param {String} num1 - binary number as string\r\n * @param {String} num2 - binary number as string\r\n * @returns {String} - Displays carried numbers as stars\r\n * @example ('0101', '0101') => '* * '\r\n */\r\nfunction carriedNumbers(num1, num2) {\r\n  // Split binaries as numbers to array\r\n  const bin1 = binaryToArray(num1).map(Number);\r\n  const bin2 = binaryToArray(num2).map(Number);\r\n  const carriedNumbersArray = [];\r\n  const bitSize = Math.max(num1.length, num2.length) - 1;\r\n\r\n  // Check if number was carried\r\n  // true === 1 (carried)\r\n  // false === 0 (not carried)\r\n  let carry = false;\r\n\r\n  // Add star if number was carried\r\n  // Add empty space if not\r\n  for (let i = bitSize; i >= 0; i -= 1) {\r\n    carriedNumbersArray[i] = carry\r\n      ? '*'\r\n      : '\\u00A0';\r\n    carry = bin1[i] + bin2[i] + carry > 1;\r\n  }\r\n  return carriedNumbersArray.join('').toString();\r\n}\r\n\r\nexport default carriedNumbers;\r\n","import binaryToArray from './Signed/BinaryToArray';\n/**\n * @param {String} num1 - binary number as string\n * @param {String} num2 - binary number as string\n * @returns {String} - Displays borrowed numbers as stars\n * @example ('1000', '0001') => '*** '\n */\nfunction carriedNumbersSubtract(num1, num2) {\n  // Split binaries as numbers to array\n  const bin1 = binaryToArray(num1).map(Number);\n  const bin2 = binaryToArray(num2).map(Number);\n  const carriedNumbersArray = [];\n  const bitSize = Math.max(num1.length, num2.length) - 1;\n\n  // Check if number was borrowed\n  // true === 1 (borrowed)\n  // false === 0 (not borrowed)\n  let carry = false;\n\n  // Add star if number was borrowed\n  // Add empty space if not\n  for (let i = bitSize; i >= 0; i -= 1) {\n    carriedNumbersArray[i] = carry\n      ? '*'\n      : '\\u00A0';\n    carry = bin1[i] - bin2[i] - carry < 0;\n  }\n  return carriedNumbersArray.join('').toString();\n}\n\nexport default carriedNumbersSubtract;\n","import './style.css';\r\nimport { useEffect } from 'react';\r\nimport getNumber from '../../Functions/GetNumber';\r\nimport calculate from '../../Functions/Calculate';\r\nimport addZeros from './Functions/addZeros';\r\nimport checkOverflow from './Functions/UnsignedOverflow';\r\nimport carriedNumbersAdd from '../../Functions/carriedNumbersAdd';\r\nimport carriedNumbersSubtract from '../../Functions/carriedNumbersSubtract';\r\n\r\n// Display unsigned char calculation\r\nfunction Unsigned({\r\n  num1, num2, setNum1, setNum2, calc,\r\n}) {\r\n  // Set max bit size from user input\r\n  const bitSize = Math.max(num1.length, num2.length);\r\n\r\n  // When component updates, adds needed zeros according to bitSize\r\n  useEffect(() => {\r\n    setNum1(addZeros(num1, bitSize));\r\n    setNum2(addZeros(num2, bitSize));\r\n  });\r\n\r\n  // Display result as binary\r\n  const resultAsBinary = calculate(\r\n    getNumber(num1),\r\n    getNumber(num2),\r\n    calc,\r\n  ).toString(2);\r\n\r\n  // Display the result\r\n  const result = checkOverflow(resultAsBinary, bitSize);\r\n\r\n  // Display carried numbers as stars\r\n  const carried = calc === '+'\r\n    ? carriedNumbersAdd(num1, num2)\r\n    : carriedNumbersSubtract(num1, num2);\r\n\r\n  return (\r\n    <section className=\"section-calc\">\r\n      <p className=\"unsigned-carried-numbers\">{carried}</p>\r\n      <p>{num1}</p>\r\n      <p>\r\n        <span className=\"unsigned-calc\">{calc}</span>\r\n        {num2}\r\n      </p>\r\n      <hr />\r\n      <p>{result}</p>\r\n    </section>\r\n  );\r\n}\r\nexport default Unsigned;\r\n","import Signed from '../Signed/Signed';\r\nimport Unsigned from '../Unsigned/Unsigned';\r\n\r\n// Calculate Unsigned or Signed value based on user choice\r\nfunction UnsignedOr({\r\n  num1, num2, setNum1, setNum2, calc, sign,\r\n}) {\r\n  return (\r\n    <>\r\n      {sign === 'unsigned'\r\n        ? (\r\n          <Unsigned\r\n            setNum1={setNum1}\r\n            setNum2={setNum2}\r\n            num1={num1}\r\n            num2={num2}\r\n            calc={calc}\r\n            sign={sign}\r\n          />\r\n        )\r\n        : (\r\n          <Signed\r\n            setNum1={setNum1}\r\n            setNum2={setNum2}\r\n            num1={num1}\r\n            num2={num2}\r\n            calc={calc}\r\n            sign={sign}\r\n          />\r\n        )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UnsignedOr;\r\n","import { useState } from 'react';\r\nimport './App.css';\r\nimport Input from './Components/Input/Input';\r\nimport Button from './Components/Button/Button';\r\nimport Result from './Components/Result/Result';\r\nimport getNumber from './Functions/GetNumber';\r\nimport Header from './Components/Header/Header';\r\nimport UnsignedOr from './Components/UnSignedOr/UnsignedOr';\r\n\r\nfunction App() {\r\n  const [num1, setNum1] = useState(0);\r\n  const [num2, setNum2] = useState(0);\r\n  const [calc, setCalc] = useState('+');\r\n  const [sign, setSign] = useState('unsigned');\r\n\r\n  return (\r\n    <main className=\"main-content\">\r\n      <Header sign={sign} />\r\n      <Input setNumber={setNum1} />\r\n      <Input setNumber={setNum2} />\r\n      <br />\r\n      <Button text=\"-\" setValue={setCalc} />\r\n      <Button text=\"+\" setValue={setCalc} />\r\n      <br />\r\n      <Button text=\"signed\" setValue={setSign} />\r\n      <Button text=\"unsigned\" setValue={setSign} />\r\n      <Result\r\n        num1={getNumber(num1)}\r\n        num2={getNumber(num2)}\r\n        calc={calc}\r\n      />\r\n      {\r\n        // Show Unsigned or signed after user has submitted in both fields\r\n        num1 && num2\r\n          ? (\r\n            <UnsignedOr\r\n              setNum1={setNum1}\r\n              setNum2={setNum2}\r\n              num1={num1}\r\n              num2={num2}\r\n              calc={calc}\r\n              sign={sign}\r\n            />\r\n          ) : null\r\n      }\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}