{"version":3,"sources":["Components/Input/Input.js","Functions/Calculate.js","Components/Result/Result.js","Functions/GetNumber.js","Components/Unsigned/Functions/addZeros.js","Components/Unsigned/Functions/UnsignedOverflow.js","Components/Unsigned/Unsigned.js","App.js","reportWebVitals.js","index.js"],"names":["Input","setNumber","inputMode","pattern","placeholder","onChange","e","currentTarget","value","style","textAlign","calculateTotal","first","second","char","Result","num1","num2","calc","total","calculate","getNumber","binary","number","parseInt","addZerosUnsigned","bitSize","length","zerosNeeded","i","unsignedOverflow","addZeros","Unsigned","Math","max","resultAsBinary","toString","result","checkOverflow","className","App","useState","setNum1","setNum2","setCalc","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAceA,MAZf,YAA+B,IAAdC,EAAa,EAAbA,UACf,OACE,uBACEC,UAAU,UACVC,QAAQ,SACRC,YAAa,EACbC,SAAU,SAACC,GAAD,OAAOL,EAAUK,EAAEC,cAAcC,QAC3CC,MAAO,CAAEC,UAAW,aCLXC,MAJf,SAAwBC,EAAOC,EAAQC,GACrC,MAAa,MAATA,EAAqBF,EAAQC,EACpB,MAATC,EAAqBF,EAAQC,OAAjC,GCMaE,MALf,YAAuC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtBC,EAAQC,EAAUJ,EAAMC,EAAMC,GACpC,OAAO,mBAAGT,MAAO,CAAEC,UAAW,UAAvB,SAAoCS,K,MCO9BE,MAJf,SAAmBC,GACjB,IAAMC,EAASC,SAASF,EAAQ,GAChC,OAAOC,GAAkB,GCQZE,MAXf,SAA0BH,EAAQI,GAEhC,GAAIJ,EAAOK,OAASD,EAElB,IADA,IAAME,EAAcF,EAAUJ,EAAOK,OAC5BE,EAAI,EAAGA,EAAID,EAAaC,IAC/BP,EAAS,IAAMA,EAGnB,OAAOA,GCNMQ,MALf,SAA0BR,EAAQI,GAEhC,OADiBJ,EAAOK,OAASD,GAAWF,SAASF,EAAQ,GAAK,EAChD,YAAcS,EAAST,EAAQI,IC2BpCM,MA1Bf,YAAyC,IAArBhB,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAIxBQ,EAAUO,KAAKC,IAAIlB,EAAKW,OAAQV,EAAKU,QAC3CX,EAAOe,EAASf,EAAMU,GACtBT,EAAOc,EAASd,EAAMS,GACtB,IAAIS,EAAiBf,EACnBC,EAAUL,GACVK,EAAUJ,GACVC,GACAkB,SAAS,GAGLC,EAASC,EAAcH,EAAgBT,GAE7C,OACE,0BAASa,UAAU,eAAnB,UACE,4BAAIvB,IACJ,4BAAIC,IACJ,uBACA,4BAAIoB,QCGKG,MAzBf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNzB,EADM,KACA0B,EADA,OAEWD,mBAAS,GAFpB,mBAENxB,EAFM,KAEA0B,EAFA,OAGWF,mBAAS,KAHpB,mBAGNvB,EAHM,KAGA0B,EAHA,KAUb,OACE,uBAAML,UAAU,eAAhB,UACE,cAAC,EAAD,CAAOtC,UAAWyC,IAClB,cAAC,EAAD,CAAOzC,UAAW0C,IAFpB,IAEgC,uBAC9B,wBAAQE,QAAS,kBAAMD,EAAQ,MAA/B,eACA,wBAAQC,QAAS,kBAAMD,EAAQ,MAA/B,eACA,cAAC,EAAD,CAAQ5B,KAAMK,EAAUL,GAAOC,KAAMI,EAAUJ,GAAOC,KAAMA,IAG1DF,GAAQC,EAAO,cAAC,EAAD,CAAUD,KAAMA,EAAMC,KAAMA,EAAMC,KAAMA,IAAW,SCb3D4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e34b0ec.chunk.js","sourcesContent":["// For user input\r\n// Take only binary numbers (0 and 1) as valid values\r\nfunction Input({ setNumber }) {\r\n  return (\r\n    <input\r\n      inputMode=\"numeric\"\r\n      pattern=\"[0-1]*\"\r\n      placeholder={0}\r\n      onChange={(e) => setNumber(e.currentTarget.value)}\r\n      style={{ textAlign: \"center\" }}\r\n    ></input>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","function calculateTotal(first, second, char) {\r\n  if (char === \"+\") return first + second;\r\n  if (char === \"-\") return first - second;\r\n}\r\nexport default calculateTotal;\r\n","import calculate from \"../../Functions/Calculate\";\r\n\r\n// Display the result\r\nfunction Result({ num1, num2, calc }) {\r\n  const total = calculate(num1, num2, calc);\r\n  return <p style={{ textAlign: \"center\" }}>{total}</p>;\r\n}\r\n\r\nexport default Result;\r\n","/**\r\n * Convert binary string to number and return it\r\n * If string is not valid binary return 0\r\n * @example 0011 => 3\r\n * @example 0022 => 0\r\n * @param {String} binary\r\n * @returns {Number}\r\n */\r\nfunction getNumber(binary) {\r\n  const number = parseInt(binary, 2);\r\n  return number ? number : 0;\r\n}\r\nexport default getNumber;\r\n","/**\r\n * Add zeros to beginning of binary according to bit size\r\n * @example (0100, 5) => 01000\r\n * @param {String} binary - binary\r\n * @param {Number} bitSize - bit size\r\n * @returns {String}\r\n */\r\nfunction addZerosUnsigned(binary, bitSize) {\r\n  // Check if adding zeros is needed\r\n  if (binary.length < bitSize) {\r\n    const zerosNeeded = bitSize - binary.length;\r\n    for (let i = 0; i < zerosNeeded; i++) {\r\n      binary = \"0\" + binary;\r\n    }\r\n  }\r\n  return binary;\r\n}\r\n\r\nexport default addZerosUnsigned;\r\n","import addZeros from \"./addZeros\";\r\n// Check if result is bigger than bit size\r\n// Or smaller than 0\r\n// Add zeros according to bit size\r\nfunction unsignedOverflow(binary, bitSize) {\r\n  const overflow = binary.length > bitSize || parseInt(binary, 2) < 0;\r\n  return overflow ? \"overflow!\" : addZeros(binary, bitSize);\r\n}\r\n\r\nexport default unsignedOverflow;\r\n","import \"./style.css\";\r\nimport getNumber from \"../../Functions/GetNumber\";\r\nimport calculate from \"../../Functions/Calculate\";\r\nimport addZeros from \"./Functions/addZeros\";\r\nimport checkOverflow from \"./Functions/UnsignedOverflow\";\r\n\r\n// Display unsigned char calculation\r\nfunction Unsigned({ num1, num2, calc }) {\r\n  // Set max bit size\r\n  // Add zeros if needed\r\n  // Display result as binary\r\n  const bitSize = Math.max(num1.length, num2.length);\r\n  num1 = addZeros(num1, bitSize);\r\n  num2 = addZeros(num2, bitSize);\r\n  let resultAsBinary = calculate(\r\n    getNumber(num1),\r\n    getNumber(num2),\r\n    calc\r\n  ).toString(2);\r\n\r\n  // Display the result\r\n  const result = checkOverflow(resultAsBinary, bitSize);\r\n\r\n  return (\r\n    <section className=\"section-calc\">\r\n      <p>{num1}</p>\r\n      <p>{num2}</p>\r\n      <hr />\r\n      <p>{result}</p>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Unsigned;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Input from \"./Components/Input/Input\";\r\nimport Result from \"./Components/Result/Result\";\r\nimport Unsigned from \"./Components/Unsigned/Unsigned\";\r\nimport getNumber from \"./Functions/GetNumber\";\r\nfunction App() {\r\n  const [num1, setNum1] = useState(0);\r\n  const [num2, setNum2] = useState(0);\r\n  const [calc, setCalc] = useState(\"+\");\r\n\r\n  // TODO:\r\n  // Vois jotenkin tyylitellä kevyesti tätä sivustoa\r\n  // Kissakuvia ja mageita videoita\r\n  // Muista golden ratio\r\n\r\n  return (\r\n    <main className=\"main-content\">\r\n      <Input setNumber={setNum1} />\r\n      <Input setNumber={setNum2} /> <br />\r\n      <button onClick={() => setCalc(\"-\")}>-</button>\r\n      <button onClick={() => setCalc(\"+\")}>+</button>\r\n      <Result num1={getNumber(num1)} num2={getNumber(num2)} calc={calc} />\r\n      {\r\n        // Show Unsigned after user has submitted in both fields\r\n        num1 && num2 ? <Unsigned num1={num1} num2={num2} calc={calc} /> : null\r\n      }\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}